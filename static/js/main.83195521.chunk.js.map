{"version":3,"sources":["profile.jpg","components/Footer.js","components/SideMenu.js","components/TopMenu.js","pages/Home.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","appBar","top","bottom","width","marginLeft","menuButton","marginRight","spacing","title","flexGrow","footer","fontSize","Footer","classes","AppBar","position","className","Typography","variant","drawer","flexShrink","drawerPaper","backgroundImage","color","bigAvatar","margin","height","SideMenu","Drawer","open","anchor","paper","Grid","container","justify","alignItems","Avatar","src","profile","List","map","text","index","ListItem","button","key","ListItemIcon","ListItemText","primary","TopMenu","Toolbar","IconButton","edge","aria-label","MenuItem","root","display","Home","name","link","destObj","Button","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.83195521.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.c9471af3.jpg\";","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n    appBar: {\n        top: 'auto',\n        bottom: 0,\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n        marginLeft: 10\n    },\n    footer: {\n        marginLeft: 20,\n        fontSize: 17\n    }\n}));\n\nfunction Footer() {\n    const classes = useStyles();\n    return (\n        <AppBar position='fixed' className={classes.appBar}>\n            <Typography variant='h6' className={classes.footer}>\n            Â© Copyright 2020\n            </Typography>\n        </AppBar>\n    );\n}\n\nexport default Footer;","import React from 'react';\nimport profile from '../profile.jpg'\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport ExitToApp from '@material-ui/icons/ExitToApp';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Avatar } from '@material-ui/core';\nimport { Grid } from '@material-ui/core';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n    backgroundImage: `linear-gradient(#cfd9df,#e2ebf0)`,\n    color: 'grey',\n  },\n  bigAvatar: {\n    margin: 30,\n    width: 100,\n    height: 100,\n  },\n}));\n\nfunction SideMenu() {\n  const classes = useStyles();\n\n  return (\n    <Drawer\n      open={true}\n      variant='permanent'\n      anchor='left'\n      className={classes.drawer}\n      classes={{\n        paper: classes.drawerPaper,\n      }}\n    >\n      <Grid container justify='center' alignItems='center'>\n        <Avatar\n          src={profile}\n          className={classes.bigAvatar}\n        />\n      </Grid>\n      <List>\n        {['Profile', 'Sign Out'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>\n              {index % 2 === 0 ? <AccountCircle /> : <ExitToApp />}\n            </ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n    </Drawer>\n  );\n}\n\nexport default SideMenu;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Face';\nimport { MenuItem } from '@material-ui/core';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction TopMenu() {\n  const classes = useStyles();\n\n  return (\n    <AppBar position='fixed' className={classes.appBar}>\n      <Toolbar>\n        <IconButton\n          edge='start'\n          className={classes.menuButton}\n          color='inherit'\n          aria-label='menu'\n        >\n          <MenuIcon />\n        </IconButton>\n        <MenuItem>\n          <Typography variant='h6' className={classes.title}>\n            Home\n          </Typography>\n        </MenuItem>\n        <MenuItem>\n          <Typography variant='h6' className={classes.title}>\n            About\n          </Typography>\n        </MenuItem>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default TopMenu;","import { makeStyles } from '@material-ui/core';\nimport React from 'react';\nimport Footer from '../components/Footer';\nimport SideMenu from '../components/SideMenu';\nimport TopMenu from '../components/TopMenu';\n\nconst useStyles = makeStyles(theme => ({\n    root: { \n        display: 'flex'\n    }\n}));\n\n\nfunction Home() {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <h1>Home</h1>;\n            <TopMenu/>\n            <SideMenu/>\n            <Footer/>\n        </div>\n    );\n}\n\nexport default Home;\n","import { ListItem, List, Button, ButtonGroup } from '@material-ui/core';\nimport React from 'react';\n\nconst destinations = [\n    { name:'Home', link:'/'},\n    { name: 'Projects', link: '/Projects'},\n    { name: 'About', link: '/About'},\n];    \nconst listItems =  destinations.map(\n    (destObj) => <Button key={destObj.name} color=\"primary\">{destObj.name}</Button> \n);\n\nfunction NavBar() {\n    return <List>\n    <ButtonGroup>\n        {listItems}\n    </ButtonGroup>\n    </List>\n}\n\nexport default NavBar;","import React from 'react';\nimport './App.css';\nimport Footer from './components/Footer';\nimport Home from './pages/Home';\nimport NavBar from './components/NavBar'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}